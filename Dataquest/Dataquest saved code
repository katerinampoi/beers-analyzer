# import the reader function from the csv module
from csv import reader

# use the python built-in function open()
# to open the children.csv file
opened_file = open('children.csv')

# use csv.reader() to parse the data from
# the opened file
read_file = reader(opened_file)

# use list() to convert the read file
# into a list of lists format
children = list(read_file)

# remove the first row of the data, which
# contains the column names

# Variables you create in previous screens are available to you, so you don't need to read the CSV again

for row in moma:
    nationality = row[2]
    nationality_clean = nationality.replace("(","")
    nationality_clean_both = nationality_clean.replace(")","")
    row[2] = nationality_clean_both
    print (nationality_clean_both[1:4])
for row in moma:
    gender = row[5]
    gender_clean = gender.replace("(","")
    gender_clean = gender.replace(")","")
    row[5] = gender_clean

for row in moma:
    gender = row[5]
    gender_clean = gender.replace("(","")
    gender_clean = gender.replace(")","")
    gender_capital = gender_clean.title()
    if not gender:
        gender = "Gender Unknown/Other"
    row[5] = gender_capital

for row in moma:
    nationality = row[2]
    nationality_clean = nationality.replace("(","")
    nationality_clean = nationality.replace(")","")
    nationality_capital = nationality.title()
    if not nationality:
        nationality = "Nationality Unknown"
    row[2] = nationality_capital

#Function for parentheses removing and converting string to integer.
def clean_and_convert(date):
    # check that we don't have an empty string
    if date != "":
        #!= means "not equal to"
        # move the rest of the function inside
        # the if statement
        date = date.replace("(", "")
        date = date.replace(")", "")
        date = int(date)
    return date

#Clean and Convert the BeginDate and EndDate of moma
for row in moma:
    BeginDate = row[3]
    EndDate = row[4]
    BeginDate = clean_and_convert(BeginDate)
    EndDate = clean_and_convert(EndDate)
    row[3] = BeginDate
    row[4] = EndDate

# CONVERT range dates into their average and round the average.

test_data = ["1912", "1929", "1913-1923",
             "(1951)", "1994", "1934",
             "c. 1915", "1995", "c. 1912",
             "(1988)", "2002", "1957-1959",
             "c. 1955.", "c. 1970's",
             "C. 1990-1999"]

bad_chars = ["(",")","c","C",".","s","'", " "]

def strip_characters(string):
    for char in bad_chars:
        string = string.replace(char,"")
    return string

stripped_test_data = ['1912', '1929', '1913-1923',
                      '1951', '1994', '1934',
                      '1915', '1995', '1912',
                      '1988', '2002', '1957-1959',
                      '1955', '1970', '1990-1999']

def process_date(string):
    if "-" in string:
        splitted_string = string.split("-")
        date_one = splitted_string[0]
        date_two = splitted_string[1]
        date_final = (int(date_one) + int(date_two)) / 2
        date_final = round(date_final)
    else:
        string = int(string)
    return string

processed_test_data = []

for d in stripped_test_data:
    d = process_date(d)
    processed_test_data.append(d)

print(processed_test_data)

# Calculation of artists' ages when they produced their work
# BeginDate substracted from EndDate

ages = []
for row in moma:
    date = row[6]
    birth = row[3]
    if type(birth) == int:
        age = date - birth
    else:
        age = 0
    ages.append(age)

final_ages = []
for age in ages:
    if age > 20 :
        final_age = age
    else:
            age = "Unknown"
    final_ages.append(final_age)

print(final_ages)

#Using the precision and the comma for difficult to read numbers

pop_millions = [
    ["China", 1379.302771],
    ["India", 1281.935991],
    ["USA",  326.625791],
    ["Indonesia",  260.580739],
    ["Brazil",  207.353391],
]


for pop in pop_millions:
    country = pop[0]
    population = pop[1]
    template = "The approximate population of {} is {:,.2f}"
    output = template.format(country, population)

    print(output)